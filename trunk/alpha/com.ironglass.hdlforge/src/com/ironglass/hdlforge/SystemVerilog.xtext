grammar com.ironglass.hdlforge.SystemVerilog with org.eclipse.xtext.common.Terminals

generate systemVerilog "http://www.ironglass.com/hdlforge/SystemVerilog"

Module:
	MODULE_KEYWORD name=ID 
	('#('parameters+=Parameter (',' parameters+=Parameter)* ')')?
	'(' (ports+=Port (',' ports+=Port)* )? ')' ';'
	
	(module_items+=MODULE_ITEM)*
	
	'endmodule'
;	



Parameter:
	name=ID
;

Port: 
	direction=PORT_DIRECTION  name=ID
;

/*
 * Keywords
 */
 
MODULE_ITEM:
	NON_PORT_MODULE_ITEM
;
 
NON_PORT_MODULE_ITEM:
	MODULE_OR_GENERATE_ITEM
;

MODULE_OR_GENERATE_ITEM:
	MODULE_COMMON_ITEM
;
 
MODULE_COMMON_ITEM:
	MODULE_OR_GENERATE_ITEM_DECLARATION
	|CONTINUOUS_ASSIGN
	|ALWAYS_CONSTRUCT
;

ALWAYS_CONSTRUCT:
	ALWAYS_KEYWORD STATEMENT
;

STATEMENT:
	STATEMENT_ITEM
;

STATEMENT_ITEM:
	BLOCKING_ASSIGNMENT ';'
	| SEQ_BLOCK
;

SEQ_BLOCK:
	'begin'
	(statements+=STATEMENT)*
	'end'
;

STATEMENT_OR_NULL:
	STATEMENT
	//| {ATTRIBUTE_IDENTIFIER} ';'
;

BLOCKING_ASSIGNMENT:
	VARIABLE_LVALUE '=' EXPRESSION
;

VARIABLE_LVALUE:
	value+=TERMINAL_VARIABLE_LVALUE
	| '{' value+=TERMINAL_VARIABLE_LVALUE (',' value+=TERMINAL_VARIABLE_LVALUE)*  '}'
;

TERMINAL_VARIABLE_LVALUE:
	HIERARCHIAL_VARIABLE_IDENTIFIER SELECT
;

SELECT:
	('[' EXPRESSION ']')*  ('[' PART_SELECT_RANGE ']')?
;

PART_SELECT_RANGE:
	CONSTANT_RANGE
	| INDEXED_RANGE
;

INDEXED_RANGE:
	EXPRESSION '+:' CONSTANT_EXPRESSION  
	|EXPRESSION '-:' CONSTANT_EXPRESSION
;

HIERARCHIAL_VARIABLE_IDENTIFIER:
	HIERARCHIAL_IDENTIFIER
;

//TODO: flesh out the identifier
HIERARCHIAL_IDENTIFIER:
	//IDENTIFIER
	name=ID
;

ALWAYS_KEYWORD:
	'always'|'always_ff'|'always_comb'|'always_latch'
;

//TODO: add DELAY3
CONTINUOUS_ASSIGN:
	'assign' (DRIVE_STRENGTH)? LIST_OF_NET_ASSIGNMENTS ';'
	//| 'assign' (DELAY_CONTROL)? LIST_OF_VARIABLE_ASSIGNMENTS ';'
;

LIST_OF_NET_ASSIGNMENTS:
	assignments+=NET_ASSIGNMENT (',' assignments+=NET_ASSIGNMENT)*
;



//TODO: flesh out EXPRESSION
EXPRESSION:
	PRIMARY
;

PRIMARY:
	PRIMARY_LITERAL
	| '$'
	| 'null'
;

PRIMARY_LITERAL:
	NUMBER
;

NET_ASSIGNMENT:
	NET_LVALUE '=' EXPRESSION
		
;

NET_LVALUE:
	PS_OR_HIERARCHICAL_NET_IDENTIFIER CONSTANT_SELECT
	| '{' NET_LVALUE (',' NET_LVALUE)* '}'
;


CONSTANT_SELECT:
	('[' CONSTANT_EXPRESSION ']' )* ( '[' CONSTANT_PART_SELECT_RANGE ']')?
;

CONSTANT_PART_SELECT_RANGE:
	CONSTANT_RANGE
	| CONSTANT_INDEXED_RANGE
;

CONSTANT_INDEXED_RANGE:
	CONSTANT_EXPRESSION '+:' CONSTANT_EXPRESSION
	| CONSTANT_EXPRESSION '-:' CONSTANT_EXPRESSION
;

CONSTANT_RANGE:
	CONSTANT_EXPRESSION ':' CONSTANT_EXPRESSION
;

CONSTANT_EXPRESSION:
	CONSTANT_PRIMARY
;

CONSTANT_PRIMARY:
	PRIMARY_LITERAL
;

PS_OR_HIERARCHICAL_NET_IDENTIFIER:
	NET_IDENTIFIER
;

NET_IDENTIFIER:
	SIMPLE_IDENTIFIER
;

//TODO: finis expanding this, just going to use string now
SIMPLE_IDENTIFIER:
	ID
;
 
MODULE_OR_GENERATE_ITEM_DECLARATION:
	PACKAGE_OR_GENERATE_ITEM_DECLARATION
;
 
PACKAGE_OR_GENERATE_ITEM_DECLARATION:
	NET_DECLARATION
	| DATA_DECLARATION
; 
NET_DECLARATION:
	NET_TYPE_OR_TRIREG LIST_OF_NET_DECL_ASSIGNMENTS';'
;
 
LIST_OF_NET_DECL_ASSIGNMENTS:
	nets+=NET_DECL_ASSIGNMENT (',' nets+=NET_DECL_ASSIGNMENT)*
;

NET_DECL_ASSIGNMENT:
	name=ID (dimensions+=UNPACKED_DIMENSIONS)* ('=' value=NUMBER)? 
;

UNPACKED_DIMENSIONS:
	'['left_bound+=INT':'right_bound+=INT']'
;
 
NET_TYPE_OR_TRIREG:
	NET_TYPE | 'trireg'
;
 
NET_TYPE:
	 'supply0' | 'supply1' | 'tri' | 'triand' | 'trior' | 'tri0' | 'tri1' | 'wire' | 'wand' | 'wor'
;
 
DATA_DECLARATION:
	('const')? (LIFETIME)? VARIABLE_DECLARATION
	
;

LIFETIME:
	'static' | 'automatic'
;
 
VARIABLE_DECLARATION:
	DATA_TYPE LIST_OF_VARIABLE_DECL_ASSIGNMENTS ';'
;

LIST_OF_VARIABLE_DECL_ASSIGNMENTS:
	variables+=VARIABLE_DECL_ASSIGNMENT (',' variables+=VARIABLE_DECL_ASSIGNMENT)*
;

VARIABLE_DECL_ASSIGNMENT:
	name=ID (dimensions+=UNPACKED_DIMENSIONS)* ('=' value=NUMBER)?
;

 
DATA_TYPE:
	INTEGER_VECTOR_TYPE
;



INTEGER_VECTOR_TYPE:
	 'bit' | 'logic' | 'reg'
;

MODULE_KEYWORD:
	'module'|'macromodule'
;

PORT_DIRECTION:
	 'input' | 'output' | 'inout' | 'ref' 
; 

NUMBER:
	BINARY_NUMBER|OCTAL_NUMBER|HEX_NUMBER|DECIMAL_NUMBER
;



/*
 * Number terminals
 */

terminal BINARY_NUMBER:
	INT BINARY_BASE (BINARY_DIGIT)+
;

terminal OCTAL_NUMBER:
	INT OCTAL_BASE (OCTAL_DIGIT)+
;

terminal HEX_NUMBER:
	INT HEX_BASE (HEX_DIGIT)+
;

terminal DECIMAL_NUMBER:
	INT DECIMAL_BASE INT
;

terminal BINARY_BASE:
	("'"('s'|'S')?'b')|("'"('s'|'S')?'B') 
;

terminal DECIMAL_BASE:
	("'"('s'|'S')?'d')|("'"('s'|'S')?'D')
;
 
terminal OCTAL_BASE:
	("'"('s'|'S')?'o')|("'"('s'|'S')?'O')
;

terminal HEX_BASE:
	("'"('s'|'S')?'h')|("'"('s'|'S')?'H')
;

terminal X_DIGIT:
	'x'|'X'
;

terminal Z_DIGIT:
	'z'|'Z'|'?'
;

terminal BINARY_DIGIT:
	X_DIGIT|Z_DIGIT|'1'|'0'
;

terminal OCTAL_DIGIT:
	BINARY_DIGIT| '2' | '3' | '4' | '5' | '6' | '7' 
;

terminal HEX_DIGIT:
	OCTAL_DIGIT| '8' | '9' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F'
;

terminal STRENGTH0:
	 'supply0' | 'strong0' | 'pull0' | 'weak0'
;

terminal STRENGTH1:
	 'supply1' | 'strong1' | 'pull1' | 'weak1'
;

terminal DRIVE_STRENGTH:
	'(' STRENGTH0 ',' STRENGTH1 ')'
	| '(' STRENGTH1 ',' STRENGTH0 ')'
	| '(' STRENGTH0 ',' 'highz1' ')'
	| '(' STRENGTH1 ',' 'highz0' ')'
	| '(' 'highz0' ',' STRENGTH1 ')'
	| '(' 'highz1' ',' STRENGTH0 ')'
;

/*
terminal ASSIGNMENT_OPERATOR: 
	'=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '<<<=' | '>>>='
;
 
terminal UNARY_OPERATOR: 
	'+' | '-' | '!' | '~' | '&' | '~&' | '|' | '~|' | '^' | '~^' | '^~'
; 

terminal BINARY_OPERATOR: 
	'+' | '-' | '*' | '/' | '%' | '==' | '!='| '===' | '!==' | '=?=' | '!?=' | '&&' | '||' | '**' 
	| '<' | '<=' | '>' | '>=' | '&' | '|' | '^' | '^~' | '~^' | '>>' | '<<' | '>>>' | '<<<' 
;

terminal INC_OR_DEC_OPERATOR:
	'++' | '--'
;
 
terminal UNARY_MODULE_PATH_OPERATOR: 
	'!' | '~' | '&' | '~&' | '|' | '~|' | '^' | '~^' | '^~'
; 

terminal BINARY_MODULE_PATH_OPERATOR: 
	'==' | '!=' | '&&' | '||' | '&' | '|' | '^' | '^~' | '~^'
; 

terminal CMOS_SWITCHTYPE: 
	'cmos' | 'rcmos'
; 

terminal ENABLE_GATETYPE: 
	'bufif0' | 'bufif1' | 'notif0' | 'notif1'
; 

terminal MOS_SWITCHTYPE: 
	'nmos' | 'pmos' | 'rnmos' | 'rpmos'
; 

terminal N_INPUT_GATETYPE: 
	'and' | 'nand' | 'or' | 'nor' | 'xor' | 'xnor'
; 

terminal N_OUTPUT_GATETYPE: 
	'buf' | 'not'
; 

terminal PASS_EN_SWITCHTYPE: 
	'tranif0' | 'tranif1' | 'rtranif1' | 'rtranif0'
; 

terminal PASS_SWITCHTYPE: 
	'tran' | 'rtran'
;
*/
